{"ast":null,"code":"const networkError = () => Math.floor(Math.random() * Math.floor(5)) === 0;\n\nconst randomResponseTime = () => Math.floor(Math.random() * Math.floor(1000)); //i change start and end date with values of this year to test the function lease ends in less than a month\n\n\nfunction randomDate() {\n  //const start = 1609459200000;\n  const start = 1640995200000; //const end = 1640995199000;\n\n  const end = 1672531199000;\n  const date = new Date(+start + Math.random() * (end - start));\n  date.setHours(0);\n  return date.toISOString();\n}\n\nfunction randomPaymentStatus() {\n  return ['CURRENT', 'LATE'][Math.floor(Math.random() * 2)];\n}\n\nlet tenants = [{\n  id: 1,\n  name: 'Fahad Ryder',\n  paymentStatus: randomPaymentStatus(),\n  leaseEndDate: randomDate()\n}, {\n  id: 2,\n  name: 'Lucinda Busby',\n  paymentStatus: randomPaymentStatus(),\n  leaseEndDate: randomDate()\n}, {\n  id: 3,\n  name: 'Ameen Hammond',\n  paymentStatus: randomPaymentStatus(),\n  leaseEndDate: randomDate()\n}, {\n  id: 4,\n  name: 'Emrys Mcguire',\n  paymentStatus: randomPaymentStatus(),\n  leaseEndDate: randomDate()\n}, {\n  id: 5,\n  name: 'Tamar Robertson',\n  paymentStatus: randomPaymentStatus(),\n  leaseEndDate: randomDate()\n}];\n\nconst valid = tenant => {\n  return !!tenant.name && tenant.name.length <= 25 && !!tenant.paymentStatus && !!tenant.leaseEndDate;\n};\n\nlet nextId = 6;\n\nconst deleteTenant = id => {\n  tenants = tenants.filter(tenant => tenant.id !== id);\n};\n\nexport const Service = {\n  getTenants: () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(function () {\n        networkError() ? reject(\"Network Error!\") : resolve([...tenants]);\n      }, randomResponseTime());\n    });\n  },\n  addTenant: tenant => {\n    return new Promise((resolve, reject) => {\n      setTimeout(function () {\n        if (!valid(tenant)) {\n          reject(\"Invalid payload\");\n        }\n\n        if (networkError()) {\n          reject(\"Network Error!\");\n        } else {\n          tenant.id = nextId++;\n          tenants.push(tenant);\n          resolve({ ...tenant\n          });\n        }\n      }, randomResponseTime());\n    });\n  },\n  deleteTenant: id => {\n    return new Promise((resolve, reject) => {\n      setTimeout(function () {\n        if (networkError()) {\n          reject(\"Network Error!\");\n        } else {\n          deleteTenant(id);\n          resolve('OK');\n        }\n      }, randomResponseTime());\n    });\n  }\n};","map":{"version":3,"sources":["/Users/ignaciomacedo/Documents/react22/desafio/src/Service.js"],"names":["networkError","Math","floor","random","randomResponseTime","randomDate","start","end","date","Date","setHours","toISOString","randomPaymentStatus","tenants","id","name","paymentStatus","leaseEndDate","valid","tenant","length","nextId","deleteTenant","filter","Service","getTenants","Promise","resolve","reject","setTimeout","addTenant","push"],"mappings":"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","sourcesContent":["const networkError = () => Math.floor(Math.random() * Math.floor(5)) === 0;\n\nconst randomResponseTime = () => Math.floor(Math.random() * Math.floor(1000));\n\n//i change start and end date with values of this year to test the function lease ends in less than a month\nfunction randomDate() {\n  //const start = 1609459200000;\n  const start = 1640995200000;\n  //const end = 1640995199000;\n  const end = 1672531199000;\n  const date = new Date(+start + Math.random() * (end - start));\n  date.setHours(0);\n  return date.toISOString();\n}\n\nfunction randomPaymentStatus() {\n  return ['CURRENT', 'LATE'][Math.floor(Math.random() * 2)];\n}\n\nlet tenants = [\n  {\n    id: 1,\n    name: 'Fahad Ryder',\n    paymentStatus: randomPaymentStatus(),\n    leaseEndDate: randomDate()\n  },\n  {\n    id: 2,\n    name: 'Lucinda Busby',\n    paymentStatus: randomPaymentStatus(),\n    leaseEndDate: randomDate()\n  },\n  {\n    id: 3,\n    name: 'Ameen Hammond',\n    paymentStatus: randomPaymentStatus(),\n    leaseEndDate: randomDate()\n  },\n  {\n    id: 4,\n    name: 'Emrys Mcguire',\n    paymentStatus: randomPaymentStatus(),\n    leaseEndDate: randomDate()\n  },\n  {\n    id: 5,\n    name: 'Tamar Robertson',\n    paymentStatus: randomPaymentStatus(),\n    leaseEndDate: randomDate()\n  }\n];\n\nconst valid = (tenant) => {\n  return !!tenant.name && tenant.name.length <= 25 && !!tenant.paymentStatus && !!tenant.leaseEndDate;\n}\n\nlet nextId = 6;\n\nconst deleteTenant = (id) => {\n  tenants = tenants.filter(tenant => tenant.id !== id);\n}\n\nexport const Service = {\n  getTenants: () => {\n    return new Promise((resolve, reject) => {\n      setTimeout(function () {\n        networkError() ? reject(\"Network Error!\") : resolve([...tenants]);\n      }, randomResponseTime());\n    });\n  },\n  addTenant: (tenant) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(function () {\n        if (!valid(tenant)) {\n          reject(\"Invalid payload\");\n        }\n        if (networkError()) {\n          reject(\"Network Error!\");\n        } else {\n          tenant.id = nextId++;\n          tenants.push(tenant);\n          resolve({...tenant});\n        }\n      }, randomResponseTime());\n    });\n  },\n  deleteTenant: (id) => {\n    return new Promise((resolve, reject) => {\n      setTimeout(function () {\n        if (networkError()) {\n          reject(\"Network Error!\")\n        } else {\n          deleteTenant(id);\n          resolve('OK')\n        }\n      }, randomResponseTime());\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}